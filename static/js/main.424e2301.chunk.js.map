{"version":3,"sources":["comics/1.js","components/App.js","serviceWorker.js","index.js"],"names":["comics","1","image","2","3","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentPage","getBackgroundColor","goToPage","bind","assertThisInitialized","goToPrevPage","renderNextButton","page","window","scrollTo","setState","_this2","react_default","a","createElement","Col_default","style","background","border","href","height","width","objectFit","src","alt","onClick","_this3","className","Container_default","flex","Row_default","Component","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.424e2301.chunk.js","sourcesContent":["export const comics = {\n  1: {\n    image: \"https://66.media.tumblr.com/faf69b0131fea237e67711d09d0d12a2/tumblr_ppog5xckoW1qk80y3o1_1280.png\"\n  },\n  2: {\n    image: \"https://i.ibb.co/Kx9Fhtw/p2colors.png \"\n  },\n  3: {\n    image: \"https://i.ibb.co/yQNYT72/p3colors.png\"\n  }\n }\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport { comics }  from '../comics/1.js';\n\nclass App extends Component {\n  state = {\n    currentPage: 1\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { currentPage: 1 };\n    this.goToPage = this.goToPage.bind(this);\n    this.goToPrevPage = this.goToPrevPage.bind(this);\n    this.renderNextButton = this.renderNextButton.bind(this);\n  }\n\n  goToPage(page) {\n    window.scrollTo(0, 0)\n    this.setState({ currentPage: page })\n  }\n\n  goToPrevPage() {\n    window.scrollTo(0, 0)\n    const { currentPage } = this.state;\n    if (currentPage !== 1) {\n      this.goToPage(currentPage-1);\n    }\n  }\n\n  renderNextButton() {\n    const { currentPage } = this.state;\n    if (currentPage === 3) {\n      return (\n        <Col>\n          <button style={ {background: 'transparent', border: 0} } href=\"https://soundcloud.com/totallystraight/sets/marvellous-travelling-band\">\n            <img style={ {height: '100%', width: '100%', objectFit: 'contain'}} src={\"https://i.ibb.co/yF4Jr7h/lastbutton.png\"} alt='pepa' />\n          </button>\n        </Col>\n      )\n    }\n    return (\n      <Col>\n        <button style={ {background: 'transparent', border: 0} } href=\"#\" onClick={() => this.goToPage(currentPage+1)}>\n          <img style={ {height: '100%', width: '100%', objectFit: 'contain'}} src={\"https://i.ibb.co/tp4CkJ4/nextarrowpng.png\"} alt='pepa' />\n        </button>\n      </Col>\n    )\n  }\n\n  getBackgroundColor = () => {\n    const { currentPage } = this.state;\n    switch(currentPage) {\n      case 1:\n        return \"#ff9400\"\n      case 2:\n        return \"#ffec00\"\n      default:\n        return \"#ffffff\"\n    }\n  }\n\n  render() {\n    const { currentPage } = this.state;\n    return (\n      <div className=\"App\" style={{ background: this.getBackgroundColor() }}>\n        <Container style={ {flex: 1} }>\n          <Row>\n            <Col style={ {width: \"80%\"} }>\n              <img style={ {height: '100%', width: '100%', objectFit: 'contain'}} src={comics[currentPage].image} alt='pepa' />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <button style={ {background: 'transparent', border: 0} } href=\"#\" onClick={() => this.goToPrevPage()}>\n                <img style={ {height: '100%', width: '100%', objectFit: 'contain'}} src={\"https://i.ibb.co/ZVgZYYz/prevarrow.png\"} alt='pepa' />\n              </button>\n            </Col>\n            <Col></Col>\n            {\n              this.renderNextButton()\n            }\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
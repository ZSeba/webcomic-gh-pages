{"version":3,"sources":["comics/1.js","components/App.js","serviceWorker.js","index.js"],"names":["comics","1","image","2","3","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentPage","getBackgroundColor","goToPage","bind","assertThisInitialized","goToPrevPage","renderNextButton","page","window","scrollTo","setState","_this2","react_default","a","createElement","Col_default","style","background","border","href","height","width","objectFit","src","alt","onClick","_this3","className","Container_default","flex","Row_default","Component","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d46ad0d5.chunk.js","sourcesContent":["export const comics = {\r\n  1: {\r\n    image: \"https://66.media.tumblr.com/faf69b0131fea237e67711d09d0d12a2/tumblr_ppog5xckoW1qk80y3o1_1280.png\"\r\n  },\r\n  2: {\r\n    image: \"https://66.media.tumblr.com/ae7b23fe51548c9cf96064b4608a610f/tumblr_pst7gaJDdE1qk80y3o1_1280.png \"\r\n  },\r\n  3: {\r\n    image: \"https://66.media.tumblr.com/56bdbe7f83ceb8c2f820b3d12217580b/tumblr_pst7iar4bk1qk80y3o1_1280.png\"\r\n  }\r\n }\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport { comics }  from '../comics/1.js';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentPage: 1\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { currentPage: 1 };\r\n    this.goToPage = this.goToPage.bind(this);\r\n    this.goToPrevPage = this.goToPrevPage.bind(this);\r\n    this.renderNextButton = this.renderNextButton.bind(this);\r\n  }\r\n\r\n  goToPage(page) {\r\n    window.scrollTo(0, 0)\r\n    this.setState({ currentPage: page })\r\n  }\r\n\r\n  goToPrevPage() {\r\n    window.scrollTo(0, 0)\r\n    const { currentPage } = this.state;\r\n    if (currentPage !== 1) {\r\n      this.goToPage(currentPage-1);\r\n    }\r\n  }\r\n\r\n  renderNextButton() {\r\n    const { currentPage } = this.state;\r\n    if (currentPage === 3) {\r\n      return (\r\n        <Col>\r\n          <button style={ {background: 'transparent', border: 0} } href=\"https://soundcloud.com/totallystraight/sets/marvellous-travelling-band\">\r\n            <img style={ {height: '100%', width: '100%', objectFit: 'contain'}} src={\"https://i.ibb.co/yF4Jr7h/lastbutton.png\"} alt='pepa' />\r\n          </button>\r\n        </Col>\r\n      )\r\n    }\r\n    return (\r\n      <Col>\r\n        <button style={ {background: 'transparent', border: 0} } href=\"#\" onClick={() => this.goToPage(currentPage+1)}>\r\n          <img style={ {height: '100%', width: '100%', objectFit: 'contain'}} src={\"https://i.ibb.co/tp4CkJ4/nextarrowpng.png\"} alt='pepa' />\r\n        </button>\r\n      </Col>\r\n    )\r\n  }\r\n\r\n  getBackgroundColor = () => {\r\n    const { currentPage } = this.state;\r\n    switch(currentPage) {\r\n      case 1:\r\n        return \"#ff9400\"\r\n      case 2:\r\n        return \"#ffec00\"\r\n      default:\r\n        return \"#ffffff\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { currentPage } = this.state;\r\n    return (\r\n      <div className=\"App\" style={{ background: this.getBackgroundColor() }}>\r\n        <Container style={ {flex: 1} }>\r\n          <Row>\r\n            <Col style={ {width: \"80%\"} }>\r\n              <img style={ {height: '100%', width: '100%', objectFit: 'contain'}} src={comics[currentPage].image} alt='pepa' />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <button style={ {background: 'transparent', border: 0} } href=\"#\" onClick={() => this.goToPrevPage()}>\r\n                <img style={ {height: '100%', width: '100%', objectFit: 'contain'}} src={\"https://i.ibb.co/ZVgZYYz/prevarrow.png\"} alt='pepa' />\r\n              </button>\r\n            </Col>\r\n            <Col></Col>\r\n            {\r\n              this.renderNextButton()\r\n            }\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}